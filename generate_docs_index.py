#!/usr/bin/env python3
# generate_docs_index.py

import os
import logging

# Basic logging setup
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- Configuration ---
# The directory containing the .rst files we want to index.
DOCS_DIR = "docs"
# The name of the output file that will contain the table of contents.
OUTPUT_FILENAME = "index.rst"
# The full path to the output file.
OUTPUT_FILEPATH = os.path.join(DOCS_DIR, OUTPUT_FILENAME)
# We must exclude the generated index file itself to avoid a circular reference.
EXCLUDE_FILES = [OUTPUT_FILENAME]

def generate_docs_index():
    """
    Scans the DOCS_DIR for .rst files and generates a master index.rst file
    with a toctree directive to include them all in the Sphinx build.
    """
    logging.info(f"Starting to generate index for '{DOCS_DIR}' directory.")

    if not os.path.isdir(DOCS_DIR):
        logging.error(f"Directory not found: '{DOCS_DIR}'. Aborting.")
        return

    try:
        # Find all .rst files in the directory, excluding the ones in our exclusion list.
        rst_files = [
            f for f in os.listdir(DOCS_DIR)
            if f.endswith(".rst") and f not in EXCLUDE_FILES
        ]
        rst_files.sort()
        logging.info(f"Found {len(rst_files)} .rst files to include in the index.")

        with open(OUTPUT_FILEPATH, "w", encoding="utf-8") as f:
            # --- Write the RST Header ---
            f.write("Documentation\n")
            f.write("=============\n\n")
            f.write("This index was automatically generated. Do not edit this file directly.\n\n")

            # --- Write the toctree Directive ---
            f.write(".. toctree::\n")
            f.write("   :maxdepth: 1\n\n")

            # --- Add each found file to the toctree ---
            for rst_file in rst_files:
                # Sphinx needs the filename without the .rst extension for the toctree.
                file_basename = os.path.splitext(rst_file)[0]
                f.write(f"   {file_basename}\n")

        logging.info(f"Successfully generated '{OUTPUT_FILEPATH}'.")

    except Exception as e:
        logging.error(f"An error occurred while generating the docs index: {e}")

if __name__ == "__main__":
    generate_docs_index()
