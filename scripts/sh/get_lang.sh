#!/bin/bash
# scripts/sh/get_lang.sh
# This script detects the system language, downloads a corresponding voice model
# if it's not a default one (de, en), and helps configure it.
set -e

# --- Path Definitions ---
# The script is in "scripts/sh/", so we need to go up two levels to the project root.
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$SCRIPT_DIR/../.."
MODEL_DIR="$PROJECT_ROOT/models"
CONFIG_DIR="$PROJECT_ROOT/config"
SETTINGS_LOCAL_PATH="$CONFIG_DIR/settings_local.py"


# --- Language Detection Function ---
# Normalizes the system's $LANG variable to a Vosk-compatible model code.
get_lang_code() {
    # We convert the input to lowercase for broader matching
    local lang_lower=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    case "$lang_lower" in
        en_us*|en*) echo "en-us" ;;
        de*)       echo "de" ;;
        fr*)       echo "fr" ;;
        es*)       echo "es" ;;
        ru*)       echo "ru" ;;
        zh*)       echo "cn" ;;
        *)         echo "en-us" ;; # Default fallback
    esac
}


# --- Main Logic ---
log_info() {
    echo "INFO: $1"
}

# 1. Determine the target language code from system environment.
RAW_LANG="${1:-$LANG}"
LANG_CODE=$(get_lang_code "$RAW_LANG")

# 2. Check if the detected language is one of our defaults (already installed).
if [[ "$LANG_CODE" == "de" || "$LANG_CODE" == "en-us" ]]; then
    log_info "System language '${LANG_CODE}' is a default. No extra model needed."
    exit 0
fi

# 3. If it's a different language, proceed to download.
log_info "Detected non-default language: '${LANG_CODE}'. Checking for model..."

MODEL_VERSION="0.22" # We primarily use this version for extra models
MODEL_NAME="vosk-model-${LANG_CODE}-${MODEL_VERSION}"
MODEL_PATH="${MODEL_DIR}/${MODEL_NAME}"
MODEL_URL="https://alphacephei.com/vosk/models/${MODEL_NAME}.zip"
MODEL_ZIP_PATH="${MODEL_DIR}/${MODEL_NAME}.zip"

# Create model directory if it doesn't exist
mkdir -p "$MODEL_DIR"

# Check if model already exists. If not, download and unpack it.
if [ ! -d "$MODEL_PATH" ]; then
  log_info "Downloading Vosk model '${MODEL_NAME}'..."
  wget -q --show-progress "$MODEL_URL" -O "$MODEL_ZIP_PATH"
  unzip -q "$MODEL_ZIP_PATH" -d "$MODEL_DIR"
  rm "$MODEL_ZIP_PATH"
  log_info "Model download complete."
else
  log_info "Model '${MODEL_NAME}' already exists."
fi

# 4. Configure settings_local.py safely.
log_info "Updating configuration..."

# These are the standard models that are always assumed to be present.
DEFAULT_MODELS_PYTHON_LIST="\"vosk-model-de-0.21\", \"vosk-model-en-us-0.22\""
NEW_MODEL_PYTHON_STRING="\"$MODEL_NAME\""

if [ ! -f "$SETTINGS_LOCAL_PATH" ]; then
    # File doesn't exist: Create it and add the full list of models.
    log_info "Creating new 'config/settings_local.py' with the new model."
    # Ensure config directory exists
    mkdir -p "$CONFIG_DIR"
    echo "# -- Automatically generated by setup script --" > "$SETTINGS_LOCAL_PATH"
    echo "PRELOAD_MODELS = [${DEFAULT_MODELS_PYTHON_LIST}, ${NEW_MODEL_PYTHON_STRING}]" >> "$SETTINGS_LOCAL_PATH"
else
    # File exists: Do not touch it. Instruct the user instead.
    log_info "IMPORTANT: 'config/settings_local.py' already exists."
    log_info "To activate the new language, please manually add the following model name"
    log_info "to the 'PRELOAD_MODELS' list in your settings_local.py file:"
    log_info "--> ${MODEL_NAME}"
fi

log_info "Setup check complete."
