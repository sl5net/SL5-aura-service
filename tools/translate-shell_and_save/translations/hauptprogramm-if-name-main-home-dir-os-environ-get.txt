--- Original ---
# === HAUPTPROGRAMM ===

if __name__ == "__main__":


    HOME_DIR = os.environ.get("HOME", "/tmp") # $HOME Variable

    SPEAK_SCRIPT_PATH = os.path.join(HOME_DIR, "projects/py/TTS/speak_file.py")

    LOG_FILE_PATH = "/tmp/speak_error.log"

    # Nutzung: script.py [clipboard|TEXT] [TARGET_LANG] [OPTIONAL: SAVE]
    if len(sys.argv) < 3:
        print("Usage: python3 translate_and_save.py [clipboard|TEXT] [TARGET_LANG] [SAVE|NOSAVE]", file=sys.stderr)
        sys.exit(1)



    input_source = sys.argv[1]
    target_lang = sys.argv[2]
    should_save = len(sys.argv) > 3 and sys.argv[3].upper() == 'SAVE'

    # 1. Text besorgen (PT Original oder was auch immer in der Zwischenablage ist)
    text_to_translate = ""
    if input_source.lower() in ['clipboard', '-clipboard']:

        # NEU: Kopiere zuerst die Auswahl in das Clipboard, falls noch nicht geschehen
        if not copy_selection_to_clipboard():
            sys.exit(1)


        try:
            text_to_translate = pyperclip.paste()
        except pyperclip.PyperclipException as e:
            print(f"[Fehler beim Lesen der Zwischenablage: {e}]", file=sys.stderr)
            sys.exit(1)
    else:
        text_to_translate = input_source

    # 2. Übersetzen
    translated_result = translate_text(text_to_translate, target_lang)

    # Prüfen auf Übersetzungsfehler
    if translated_result.startswith("[Fehler"):
        print(translated_result, file=sys.stderr)
        sys.exit(1)

    # 3. Speichern, falls angefordert
    if should_save:
        # HINWEIS: Wir nehmen an, dass der Text_to_translate der PT-Originaltext ist,
        # der in der Datenbank gespeichert werden soll.
        save_msg, save_success = save_translation_as_file(text_to_translate, translated_result, target_lang)

        # Optional: Gib die Speichernachricht zusätzlich aus (oder logge sie)
        # print(save_msg)

   # 4. SPRACHAUSGABE (Der kritische neue Teil)
    temp_file_path = None
    try:
        # a) Erstelle temporäre Datei und schreibe deutschen Text hinein
        with tempfile.NamedTemporaryFile(mode='w', delete=False, encoding='utf-8') as tmp:
            tmp.write(translated_result)
            temp_file_path = tmp.name # $f ist nun temp_file_path

        # b) Befehl ausführen: python3 "$speak_file_path" "$temp_file_path" > log

        # -c "python3 /home/seeh/projects/py/TTS/speak_file.py %f > /tmp/speak_error.log 2>&1"

        python_bin = sys.executable
        # python_bin = '/home/seeh/projects/py/TTS/python3'
        python_bin   = "/home/seeh/projects/py/TTS/venv/bin/python3"

        cmd = [python_bin, SPEAK_SCRIPT_PATH, temp_file_path]

        with opn(LOG_FILE_PATH, "a") as log:
            subprocess.run(cmd, stdout=log, stderr=subprocess.STDOUT, check=False)

    except Exception as e:
        # Fehler beim Speak-Prozess wird nur geloggt, aber Hauptprozess läuft weiter
        print(f"[Warnung: Fehler bei TTS-Ausgabe: {e}]", file=sys.stderr)

    finally:
        # c) Temporäre Datei aufräumen

        print(f"python_bin={python_bin} SPEAK_SCRIPT_PATH={SPEAK_SCRIPT_PATH} temp_file_path={temp_file_path}")

        time.sleep(4)
        if temp_file_path and os.path.exists(temp_file_path):
            os.remove(temp_file_path)


    # 5. Ergebnis ausgeben (immer, wenn erfolgreich übersetzt)
    pyperclip.copy(translated_result)
    print(translated_result)

--- Übersetzung (DE) ---
# === HAUPTPROGRAMM ===

if __name__ == "__main__":


    HOME_DIR = os.environ.get("HOME", "/tmp") # $HOME Variable

    SPEAK_SCRIPT_PATH = os.path.join(HOME_DIR, "projects/py/TTS/speak_file.py")

    LOG_FILE_PATH = "/tmp/speak_error.log"

    # Nutzung: script.py [clipboard|TEXT] [TARGET_LANG] [OPTIONAL: SAVE]
    if len(sys.argv) < 3:
        print("Usage: python3 translate_and_save.py [clipboard|TEXT] [TARGET_LANG] [SAVE|NOSAVE]", file=sys.stderr)
        sys.exit(1)



    input_source = sys.argv[1]
    target_lang = sys.argv[2]
    should_save = len(sys.argv) > 3 and sys.argv[3].upper() == 'SAVE'

    # 1. Text besorgen (PT Original oder was auch immer in der Zwischenablage ist)
    text_to_translate = ""
    if input_source.lower() in ['clipboard', '-clipboard']:

        # NEU: Kopiere zuerst die Auswahl in das Clipboard, falls noch nicht geschehen
        if not copy_selection_to_clipboard():
            sys.exit(1)


        try:
            text_to_translate = pyperclip.paste()
        except pyperclip.PyperclipException as e:
            print(f"[Fehler beim Lesen der Zwischenablage: {e}]", file=sys.stderr)
            sys.exit(1)
    else:
        text_to_translate = input_source

    # 2. Übersetzen
    translated_result = translate_text(text_to_translate, target_lang)

    # Prüfen auf Übersetzungsfehler
    if translated_result.startswith("[Fehler"):
        print(translated_result, file=sys.stderr)
        sys.exit(1)

    # 3. Speichern, falls angefordert
    if should_save:
        # HINWEIS: Wir nehmen an, dass der Text_to_translate der PT-Originaltext ist,
        # der in der Datenbank gespeichert werden soll.
        save_msg, save_success = save_translation_as_file(text_to_translate, translated_result, target_lang)

        # Optional: Gib die Speichernachricht zusätzlich aus (oder logge sie)
        # print(save_msg)

   # 4. SPRACHAUSGABE (Der kritische neue Teil)
    temp_file_path = None
    try:
        # a) Erstelle temporäre Datei und schreibe deutschen Text hinein
        with tempfile.NamedTemporaryFile(mode='w', delete=False, encoding='utf-8') as tmp:
            tmp.write(translated_result)
            temp_file_path = tmp.name # $f ist nun temp_file_path

        # b) Befehl ausführen: python3 "$speak_file_path" "$temp_file_path" > log

        # -c "python3 /home/seeh/projects/py/TTS/speak_file.py %f > /tmp/speak_error.log 2>&1"

        python_bin = sys.executable
        # python_bin = '/home/seeh/projects/py/TTS/python3'
        python_bin   = "/home/seeh/projects/py/TTS/venv/bin/python3"

        cmd = [python_bin, SPEAK_SCRIPT_PATH, temp_file_path]

        with opn(LOG_FILE_PATH, "a") as log:
            subprocess.run(cmd, stdout=log, stderr=subprocess.STDOUT, check=False)

    except Exception as e:
        # Fehler beim Speak-Prozess wird nur geloggt, aber Hauptprozess läuft weiter
        print(f"[Warnung: Fehler bei TTS-Ausgabe: {e}]", file=sys.stderr)

    finally:
        # c) Temporäre Datei aufräumen

        print(f"python_bin={python_bin} SPEAK_SCRIPT_PATH={SPEAK_SCRIPT_PATH} temp_file_path={temp_file_path}")

        time.sleep(4)
        if temp_file_path and os.path.exists(temp_file_path):
            os.remove(temp_file_path)


    # 5. Ergebnis ausgeben (immer, wenn erfolgreich übersetzt)
    pyperclip.copy(translated_result)
    print(translated_result)
